class Student_Model {
  String? name;
  String? image;
  double? gpa;
  String? id; // You can use either int or String, depending on your use case
  String? password;
  String? levelar;
  String? phone;
  String? email;
  bool? military;
  bool? isApproved;
  String? level;
  Map<String, dynamic>? absence;
  List<String>? warning;
  List<String>? bookList;
  String? studentAddress;
  String? gender;
  String? birthDayImage;
  String? idPhoto;
  String? photograph;
  String? nominationCard;
  String? doneIn;
  String? studentPhone;
  String? guardianPhone;
  String? fatherName;
  String? fatherJob;
  String? recruitmentArea;
  String? tripleNumber;
  String? placeBirth;
  String? dateOfBirth;
  String? observance;
  String? orderStatus;
  String? transferStatus;
  String? transferType;
  String? approvalDate;
  String? partyTransferred;
  String? cardIssuingParty;
  String? idCardNumber;
  String? degreeTotal;
  String? sittingNumber;
  String? schoolName;
  String? receivedData;
  String? bandDivision;
  String? educationalQualification;
  String? basicStudentData;
  String? band;
  bool? enrollmentStatus;
  String? divisionInstitute;
  String? schoolYear;
  String? soldiers_image_1;
  String? soldiers_image_2;

  // Constructor
  Student_Model({
    required this.name,
    required this.image,
    required this.gpa,
    required this.id,
    required this.password,
    required this.isApproved,
    required this.phone,
    required this.email,
    required this.levelar,
    required this.military,
    required this.level,
    required this.absence,
    required this.warning,
    required this.bookList,
    required this.studentAddress,
    required this.gender,
    required this.birthDayImage,
    required this.idPhoto,
    required this.photograph,
    required this.nominationCard,
    required this.doneIn,
    required this.studentPhone,
    required this.guardianPhone,
    required this.fatherName,
    required this.fatherJob,
    required this.soldiers_image_1,
    required this.soldiers_image_2,
    required this.recruitmentArea,
    required this.tripleNumber,
    required this.placeBirth,
    required this.dateOfBirth,
    required this.observance,
    required this.orderStatus,
    required this.transferStatus,
    required this.transferType,
    required this.approvalDate,
    required this.partyTransferred,
    required this.cardIssuingParty,
    required this.idCardNumber,
    required this.degreeTotal,
    required this.sittingNumber,
    required this.schoolName,
    required this.receivedData,
    required this.bandDivision,
    required this.educationalQualification,
    required this.basicStudentData,
    required this.band,
    required this.enrollmentStatus,
    required this.divisionInstitute,
    required this.schoolYear,
  });

  // Factory method to create a Student object from a JSON map
  factory Student_Model.fromJson(Map<String, dynamic> json) {
    return Student_Model(
      name: json['Name'],
      isApproved: json['isApproved'],
      levelar: json['levelar'],
      image: json['Image'],
      soldiers_image_1: json['soldiers_image_1'],
      soldiers_image_2: json['soldiers_image_2'],
      gpa: json['GPA'],
      id: json['ID'],
      password: json['Password'],
      phone: json['Phone'],
      email: json['Email'],
      military: json['Military'],
      level: json['Level'],
      absence: json['Absence'],
      warning: List<String>.from(json['Warning']),
      bookList: List<String>.from(json['Book_List']),
      studentAddress: json['Student_Address'],
      gender: json['Gender'],
      birthDayImage: json['Birth_day_Image'],
      idPhoto: json['ID_photo'],
      photograph: json['Photograph'],
      nominationCard: json['Nomination_card'],
      doneIn: json['Done_in'],
      studentPhone: json['Student_phone'],
      guardianPhone: json['Guardian_phone'],
      fatherName: json['Fahther_name'],
      fatherJob: json['Father_job'],
      recruitmentArea: json['Recruitment_area'],
      tripleNumber: json['Triple_number'],
      placeBirth: json['Place_birth'],
      dateOfBirth: json['Date_of_birth'],
      observance: json['Observance'],
      orderStatus: json['Order_status'],
      transferStatus: json['Transfer_status'],
      transferType: json['Transfer_type'],
      approvalDate: json['Approval_date'],
      partyTransferred: json['Party_Transferred'],
      cardIssuingParty: json['Thecard_Issuing_Party'],
      idCardNumber: json['ID_card_number'],
      degreeTotal: json['Degre_total'],
      sittingNumber: json['Sitting_Number'],
      schoolName: json['School_Name'],
      receivedData: json['Received_Data'],
      bandDivision: json['band-Division'],
      educationalQualification: json['Educational_Qualification'],
      basicStudentData: json['Basic_student_data'],
      band: json['band'],
      enrollmentStatus: json['Enrollment_status'],
      divisionInstitute: json['Division_Institute'],
      schoolYear: json['school_year'],
    );
  }

  // Method to convert a Student object to a JSON map
  Map<String, dynamic> toJson() {
    return {
      'Name': name,
      'Image': image,
      'GPA': gpa,
      'ID': id,
      'isApproved': isApproved,
      'Password': password,
      'Phone': phone,
      'Email': email,
      'Military': military,
      'Level': level,
      'Absence': absence,
      'Warning': warning,
      'Book_List': bookList,
      'Student_Address': studentAddress,
      'Gender': gender,
      'Birth_day_Image': birthDayImage,
      'levelar': levelar,
      'ID_photo': idPhoto,
      'Photograph': photograph,
      'Nomination_card': nominationCard,
      'soldiers_image_1': soldiers_image_1,
      'soldiers_image_2': soldiers_image_2,
      'Done_in': doneIn,
      'Student_phone': studentPhone,
      'Guardian_phone': guardianPhone,
      'Fahther_name': fatherName,
      'Father_job': fatherJob,
      'Recruitment_area': recruitmentArea,
      'Triple_number': tripleNumber,
      'Place_birth': placeBirth,
      'Date_of_birth': dateOfBirth,
      'Observance': observance,
      'Order_status': orderStatus,
      'Transfer_status': transferStatus,
      'Transfer_type': transferType,
      'Approval_date': approvalDate,
      'Party_Transferred': partyTransferred,
      'Thecard_Issuing_Party': cardIssuingParty,
      'ID_card_number': idCardNumber,
      'Degre_total': degreeTotal,
      'Sitting_Number': sittingNumber,
      'School_Name': schoolName,
      'Received_Data': receivedData,
      'band-Division': bandDivision,
      'Educational_Qualification': educationalQualification,
      'Basic_student_data': basicStudentData,
      'band': band,
      'Enrollment_status': enrollmentStatus,
      'Division_Institute': divisionInstitute,
      'school_year': schoolYear,
    };
  }
}

